/*Pointer Basics:

Declare an integer variable num and a pointer ptr to an integer.
 Initialize ptr to point to the address of num. Change the value of num through ptr.

int num= 0;
cout<< "num before " << num << endl;
int *pNum = &num;
*pNum = 10;
cout << "num after " << num <<endl;*/


/*Dynamic Memory Allocation:

Write a program to dynamically allocate an array of integers of a user-specified size. Fill the array with values,
 and then print them. Don't forget to release the allocated memory.
int size;
cin>> size;
int* arr = new int[size];
for(int i = 0; i < size; i++){
    cout<< "enter nuber to add in array: "<< endl;
    cin>> arr[i];

}
    for(int i = 0; i < size; i++){
        cout<< arr[i] << endl;

    }

    delete[] arr;*/


/*int a = 10;
int b = 7;
    cout << " a before  " << a << " b before" << b;
swap(a , b);
    cout << " a after " << a << " b after" << b;

    /*   Swapping Values:

        Write a function that takes two integer pointers and swaps the values they point to. Test your function.


    void swap(int *a , int *b ){

        int temp = *a;
        *a = *b;
        *b = temp;

    */

/*   Swapping Values:

    Write a function that takes two integer pointers and swaps the values they point to. Test your function.


void swap(int *a , int *b ){

    int temp = *a;
    *a = *b;
    *b = temp;

*/
/*Array Access Using Pointers:

Write a program that uses pointers to calculate the sum and average of an array of integers.
*/
    int size;
    cin>> size;
    int* arr = new int[size];
    for(int i = 0; i < size; i++){
        cout<< "enter nuber to add in array: "<< endl;
        cin>> arr[i];

    }
    for(int i = 0; i < size; i++){
        cout<< arr[i] << endl;

    }



int* ptr = arr;
int sum = 0;
for(int i = 0;i < size ; i++){
    sum += *ptr;
    ptr++;
}
for(int j = 0 ; j< size; j++){

}

cout<<sum;


    delete[] arr;



    Pointer to Function:

    Create a function that accepts an integer array and a pointer to a function. This function should apply the function
    to each element of the array and print the results.
    String Manipulation with Pointers:

    Write a program to reverse a string using pointers. Implement a function that takes a character array (string) and
    reverses it in-place using pointers.
    Pointer to Pointer:

    Declare an integer variable x, a pointer to an integer ptr, and a pointer to a pointer to an integer ptr2.
    Initialize them so that ptr points to x, and ptr2 points to ptr. Change the value of x through ptr2.
    Dynamic 2D Array:

    Create a dynamic 2D integer array using pointers. Allow the user to specify the number of rows and columns.
    Fill the array with values and print them.
    Passing Pointers to Functions:

    Write a function that takes an integer array and its size as parameters and finds the maximum and minimum values
    in the array using pointers. Return the results through pointers.
    Linked List:

    Implement a simple singly linked list with nodes containing integer values.
    Create functions to insert nodes, delete nodes, and print the list.
    Linked List Reversal:

    Write a function to reverse a linked list in-place using pointers.
    Pointer Arithmetic:

    Given an integer array, use pointer arithmetic to find the second largest element in the array.
    Pointer to Structure:

    Define a structure representing a person with name, age, and address fields. Create an array of person structures,
    and use pointers to search for a person by name and print their details.
    Passing Arrays to Functions:

    Write a function that accepts an array of integers and its size as parameters.
    Calculate the sum of all elements in the array and return it through a pointer.
    Dynamic String:

    Implement a program that dynamically allocates memory for a string entered by the user and counts the number of vowels in it.